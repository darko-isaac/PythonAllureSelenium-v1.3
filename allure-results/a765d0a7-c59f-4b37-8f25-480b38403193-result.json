{"name": "test_fail_login_validMSG", "status": "broken", "statusDetails": {"message": "utils.custom_exceptions.TimeoutException: No se pudo hacer clic en el elemento 'BtnIniciarSesion' usando xpath con valor //span[.='Hola, identifícate']", "trace": "self = <utils.FunctionsGeneric.FunctionsGeneric object at 0x110c83e30>, name = 'BtnIniciarSesion'\n\n    def click(self, name: str):\n        \"\"\"Realiza clic en un elemento basado en un nombre genérico.\"\"\"\n        by, value = self.get_locator(name)\n        try:\n>        element = WebDriverWait(self.driver, self.timeout).until(\n            EC.element_to_be_clickable((by, value))\n         )\n\nutils/FunctionsGeneric.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:96: in until\n    value = method(self._driver)\n.venv/lib/python3.12/site-packages/selenium/webdriver/support/expected_conditions.py:363: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10ff412e0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...7ff80a56218b _pthread_start + 99\\\\n19  libsystem_pthread.dylib             0x00007ff80a55dae3 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=127.0.6533.90)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000103248838 chromedriver + 5179448\nE       1   chromedriver                        0x000000010324026a chromedriver + 5145194\nE       2   chromedriver                        0x0000000102db72b0 chromedriver + 389808\nE       3   chromedriver                        0x0000000102d8e614 chromedriver + 222740\nE       4   chromedriver                        0x0000000102e2d8ed chromedriver + 874733\nE       5   chromedriver                        0x0000000102e424a9 chromedriver + 959657\nE       6   chromedriver                        0x0000000102e25553 chromedriver + 841043\nE       7   chromedriver                        0x0000000102df67f6 chromedriver + 649206\nE       8   chromedriver                        0x0000000102df705e chromedriver + 651358\nE       9   chromedriver                        0x000000010320baa0 chromedriver + 4930208\nE       10  chromedriver                        0x00000001032109b6 chromedriver + 4950454\nE       11  chromedriver                        0x0000000103211085 chromedriver + 4952197\nE       12  chromedriver                        0x00000001031ede69 chromedriver + 4808297\nE       13  chromedriver                        0x0000000103211379 chromedriver + 4952953\nE       14  chromedriver                        0x00000001031df7c4 chromedriver + 4749252\nE       15  chromedriver                        0x0000000103230548 chromedriver + 5080392\nE       16  chromedriver                        0x0000000103230707 chromedriver + 5080839\nE       17  chromedriver                        0x000000010323fe4e chromedriver + 5144142\nE       18  libsystem_pthread.dylib             0x00007ff80a56218b _pthread_start + 99\nE       19  libsystem_pthread.dylib             0x00007ff80a55dae3 thread_start + 15\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_login_fail.TestFailLogin object at 0x110c80230>\n\n    def test_fail_login_validMSG(self):\n        # Iniciar navegador y navegar a la URL principal\n        self.navegador.iniciar_navegador('MainAppUrlBaseAmazon')\n    \n        # Hace clic en el botón de iniciar sesión\n>       self.navegador.func.click('BtnIniciarSesion')\n\ntests/test_login_fail.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.FunctionsGeneric.FunctionsGeneric object at 0x110c83e30>, name = 'BtnIniciarSesion'\n\n    def click(self, name: str):\n        \"\"\"Realiza clic en un elemento basado en un nombre genérico.\"\"\"\n        by, value = self.get_locator(name)\n        try:\n         element = WebDriverWait(self.driver, self.timeout).until(\n            EC.element_to_be_clickable((by, value))\n         )\n         element.click()\n        except ElementClickInterceptedException:\n            raise ElementClickInterceptedException(\n               f\"No se pudo hacer clic en el elemento '{name}' por que no lo encontro {value}\")\n        except Exception:\n>          raise TimeoutException(f\"No se pudo hacer clic en el elemento '{name}' usando {by} con valor {value}\")\nE          utils.custom_exceptions.TimeoutException: No se pudo hacer clic en el elemento 'BtnIniciarSesion' usando xpath con valor //span[.='Hola, identifícate']\n\nutils/FunctionsGeneric.py:72: TimeoutException"}, "start": 1723091890023, "stop": 1723091906604, "uuid": "a72a4288-3631-4eba-88e2-70629251bf9a", "historyId": "75b94bfb82dfec84d1be00d579fa05f8", "testCaseId": "75b94bfb82dfec84d1be00d579fa05f8", "fullName": "tests.test_login_fail.TestFailLogin#test_fail_login_validMSG", "labels": [{"name": "tag", "value": "config_key('amazonPagecompras')"}, {"name": "tag", "value": "@pytest.mark.usefixtures('navegador_setup')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login_fail"}, {"name": "subSuite", "value": "TestFailLogin"}, {"name": "host", "value": "MacBook-Pro-de-Isaac.local"}, {"name": "thread", "value": "3689-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login_fail"}]}