{"name": "test_amazon_scroll_basic", "status": "broken", "statusDetails": {"message": "utils.custom_exceptions.TimeoutException: No se pudo enviar las teclas al elemento 'BusquedaText' con valor //input[@id='twotabsearchtextbox']", "trace": "self = <utils.FunctionsGeneric.FunctionsGeneric object at 0x103ec6cc0>, name = 'BusquedaText', keys = 'tenis nike'\n\n    def send_keys(self, name: str, keys: str):\n        \"\"\"Envía teclas a un elemento basado en un nombre genérico.\"\"\"\n        by, value = self.get_locator(name)\n        try:\n>        element = WebDriverWait(self.driver, self.timeout).until(\n            EC.visibility_of_element_located((by, value))\n         )\n\nutils/FunctionsGeneric.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:96: in until\n    value = method(self._driver)\n.venv/lib/python3.12/site-packages/selenium/webdriver/support/expected_conditions.py:156: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x103ec6f30>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...7ff80a56218b _pthread_start + 99\\\\n19  libsystem_pthread.dylib             0x00007ff80a55dae3 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=127.0.6533.90)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010c966838 chromedriver + 5179448\nE       1   chromedriver                        0x000000010c95e26a chromedriver + 5145194\nE       2   chromedriver                        0x000000010c4d52b0 chromedriver + 389808\nE       3   chromedriver                        0x000000010c4ac614 chromedriver + 222740\nE       4   chromedriver                        0x000000010c54b8ed chromedriver + 874733\nE       5   chromedriver                        0x000000010c5604a9 chromedriver + 959657\nE       6   chromedriver                        0x000000010c543553 chromedriver + 841043\nE       7   chromedriver                        0x000000010c5147f6 chromedriver + 649206\nE       8   chromedriver                        0x000000010c51505e chromedriver + 651358\nE       9   chromedriver                        0x000000010c929aa0 chromedriver + 4930208\nE       10  chromedriver                        0x000000010c92e9b6 chromedriver + 4950454\nE       11  chromedriver                        0x000000010c92f085 chromedriver + 4952197\nE       12  chromedriver                        0x000000010c90be69 chromedriver + 4808297\nE       13  chromedriver                        0x000000010c92f379 chromedriver + 4952953\nE       14  chromedriver                        0x000000010c8fd7c4 chromedriver + 4749252\nE       15  chromedriver                        0x000000010c94e548 chromedriver + 5080392\nE       16  chromedriver                        0x000000010c94e707 chromedriver + 5080839\nE       17  chromedriver                        0x000000010c95de4e chromedriver + 5144142\nE       18  libsystem_pthread.dylib             0x00007ff80a56218b _pthread_start + 99\nE       19  libsystem_pthread.dylib             0x00007ff80a55dae3 thread_start + 15\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_amazon_scrollBasic.TestAmazonScroll object at 0x103ea7f50>\n\n    def test_amazon_scroll_basic(self):\n        self.navegador.iniciar_navegador('MainAppUrlBaseAmazon')\n    # Paso 1: Teclear 'tenis nike' en el campo de búsqueda\n>       self.navegador.func.send_keys('BusquedaText', 'tenis nike')\n\ntests/test_amazon_scrollBasic.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.FunctionsGeneric.FunctionsGeneric object at 0x103ec6cc0>, name = 'BusquedaText', keys = 'tenis nike'\n\n    def send_keys(self, name: str, keys: str):\n        \"\"\"Envía teclas a un elemento basado en un nombre genérico.\"\"\"\n        by, value = self.get_locator(name)\n        try:\n         element = WebDriverWait(self.driver, self.timeout).until(\n            EC.visibility_of_element_located((by, value))\n         )\n         element.send_keys(keys)\n        except Exception:\n>          raise TimeoutException(f\"No se pudo enviar las teclas al elemento '{name}' con valor {value}\")\nE          utils.custom_exceptions.TimeoutException: No se pudo enviar las teclas al elemento 'BusquedaText' con valor //input[@id='twotabsearchtextbox']\n\nutils/FunctionsGeneric.py:83: TimeoutException"}, "start": 1723091800917, "stop": 1723091813784, "uuid": "ca38a8a2-6372-47e6-91dd-5054abc04516", "historyId": "ec7f91940f86095faccb5759888f593a", "testCaseId": "ec7f91940f86095faccb5759888f593a", "fullName": "tests.test_amazon_scrollBasic.TestAmazonScroll#test_amazon_scroll_basic", "labels": [{"name": "tag", "value": "config_key('amazonPagecompras')"}, {"name": "tag", "value": "@pytest.mark.usefixtures('navegador_setup')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_amazon_scrollBasic"}, {"name": "subSuite", "value": "TestAmazonScroll"}, {"name": "host", "value": "MacBook-Pro-de-Isaac.local"}, {"name": "thread", "value": "3611-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_amazon_scrollBasic"}]}