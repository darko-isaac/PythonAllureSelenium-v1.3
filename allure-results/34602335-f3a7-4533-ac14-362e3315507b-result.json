{"name": "test_merrcadoLibre_busqueda", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: No se pudo hacer clic en el elemento 'Paginador2' por que no lo encontro .andes-pagination__button:nth-child(3) > .andes-pagination__link", "trace": "self = <utils.FunctionsGeneric.FunctionsGeneric object at 0x103806f30>, name = 'Paginador2'\n\n    def click(self, name: str):\n        \"\"\"Realiza clic en un elemento basado en un nombre genérico.\"\"\"\n        by, value = self.get_locator(name)\n        try:\n         element = WebDriverWait(self.driver, self.timeout).until(\n            EC.element_to_be_clickable((by, value))\n         )\n>        element.click()\n\nutils/FunctionsGeneric.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1038214f0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...7ff80a56218b _pthread_start + 99\\\\n25  libsystem_pthread.dylib             0x00007ff80a55dae3 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://listado.mercadolibre.com.mx/ropa-bolsas-calzado/calzado/tenis/new-balance/new-balance-numeric_Desde_49_NoIndex_True\" class=\"andes-pagination__link\" aria-label=\"Ir a la página ...\">2</a> is not clickable at point (491, 584). Other element would receive the click: <div class=\"cookie-consent-banner-opt-out__container\">...</div>\nE         (Session info: chrome-headless-shell=127.0.6533.90)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000103410838 chromedriver + 5179448\nE       1   chromedriver                        0x000000010340826a chromedriver + 5145194\nE       2   chromedriver                        0x0000000102f7f2b0 chromedriver + 389808\nE       3   chromedriver                        0x0000000102fd2096 chromedriver + 729238\nE       4   chromedriver                        0x0000000102fcff88 chromedriver + 720776\nE       5   chromedriver                        0x0000000102fcda57 chromedriver + 711255\nE       6   chromedriver                        0x0000000102fcc902 chromedriver + 706818\nE       7   chromedriver                        0x0000000102fc0496 chromedriver + 656534\nE       8   chromedriver                        0x0000000102fed7b2 chromedriver + 841650\nE       9   chromedriver                        0x0000000102fbfe58 chromedriver + 654936\nE       10  chromedriver                        0x0000000102fed96e chromedriver + 842094\nE       11  chromedriver                        0x000000010300ab9b chromedriver + 961435\nE       12  chromedriver                        0x0000000102fed553 chromedriver + 841043\nE       13  chromedriver                        0x0000000102fbe7f6 chromedriver + 649206\nE       14  chromedriver                        0x0000000102fbf05e chromedriver + 651358\nE       15  chromedriver                        0x00000001033d3aa0 chromedriver + 4930208\nE       16  chromedriver                        0x00000001033d89b6 chromedriver + 4950454\nE       17  chromedriver                        0x00000001033d9085 chromedriver + 4952197\nE       18  chromedriver                        0x00000001033b5e69 chromedriver + 4808297\nE       19  chromedriver                        0x00000001033d9379 chromedriver + 4952953\nE       20  chromedriver                        0x00000001033a77c4 chromedriver + 4749252\nE       21  chromedriver                        0x00000001033f8548 chromedriver + 5080392\nE       22  chromedriver                        0x00000001033f8707 chromedriver + 5080839\nE       23  chromedriver                        0x0000000103407e4e chromedriver + 5144142\nE       24  libsystem_pthread.dylib             0x00007ff80a56218b _pthread_start + 99\nE       25  libsystem_pthread.dylib             0x00007ff80a55dae3 thread_start + 15\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_buscarProducto.TestBuscarMercadoLibre object at 0x103be1250>\n\n    def test_merrcadoLibre_busqueda(self):\n        self.navegador.iniciar_navegador('MercadoLibreURL')\n    # Paso 1: Teclear 'tenis nike' en el campo de búsqueda\n        self.navegador.func.send_keys('CampoBusquedaTXT', 'new balance numeric')\n    \n    # Paso 2: Hacer clic en el botón de búsqueda\n        self.navegador.func.click('BtnBusqueda')\n        #self.navegador.func.isvisible('BtnBusqueda')\n    \n    \n    # Paso 3: Hacer scroll hacia abajo 100 píxeles\n        self.navegador.func.scroll_bar_generic('down', 1000)\n        self.navegador.func.scroll_bar_generic('down', 1000)\n        self.navegador.func.scroll_bar_generic('down', 7000)\n    \n        self.navegador.func.wait_for_element('Paginador2')\n>       self.navegador.func.click('Paginador2')\n\ntests/MercadoLibre/test_buscarProducto.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.FunctionsGeneric.FunctionsGeneric object at 0x103806f30>, name = 'Paginador2'\n\n    def click(self, name: str):\n        \"\"\"Realiza clic en un elemento basado en un nombre genérico.\"\"\"\n        by, value = self.get_locator(name)\n        try:\n         element = WebDriverWait(self.driver, self.timeout).until(\n            EC.element_to_be_clickable((by, value))\n         )\n         element.click()\n        except ElementClickInterceptedException:\n>           raise ElementClickInterceptedException(\n               f\"No se pudo hacer clic en el elemento '{name}' por que no lo encontro {value}\")\nE           selenium.common.exceptions.ElementClickInterceptedException: Message: No se pudo hacer clic en el elemento 'Paginador2' por que no lo encontro .andes-pagination__button:nth-child(3) > .andes-pagination__link\n\nutils/FunctionsGeneric.py:69: ElementClickInterceptedException"}, "start": 1723091563234, "stop": 1723091569206, "uuid": "755d76e8-e0eb-4b59-b587-c6e29c44ce1c", "historyId": "7f1abb7521a0a9d0d7e4e7caa5e40cd2", "testCaseId": "7f1abb7521a0a9d0d7e4e7caa5e40cd2", "fullName": "tests.MercadoLibre.test_buscarProducto.TestBuscarMercadoLibre#test_merrcadoLibre_busqueda", "labels": [{"name": "tag", "value": "config_key('DOMMercadoLibre')"}, {"name": "tag", "value": "@pytest.mark.usefixtures('navegador_setup')"}, {"name": "parentSuite", "value": "tests.MercadoLibre"}, {"name": "suite", "value": "test_buscarProducto"}, {"name": "subSuite", "value": "TestBuscarMercadoLibre"}, {"name": "host", "value": "MacBook-Pro-de-Isaac.local"}, {"name": "thread", "value": "3412-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.MercadoLibre.test_buscarProducto"}]}